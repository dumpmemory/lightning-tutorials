trigger:
  branches:
    include:
      - main
pr: none
#stages:
#- stage: testing

jobs:

  - job: papermill
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: 2

    pool: gridai-spot-pool
    # this need to have installed docker in the base image...
    container:
      # base ML image: mcr.microsoft.com/azureml/openmpi3.1.2-cuda10.2-cudnn8-ubuntu18.04
      image: "pytorchlightning/pytorch_lightning:base-cuda-py3.8-torch1.7"
      # image: "pytorch/pytorch:1.7.1-cuda11.0-cudnn8-runtime"
      options: "-it --rm --runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all"

    variables:
      ACCELERATOR: CPU,GPU
      PUB_BRANCH: publication
      PATH_DATASETS: "$(Build.Repository.LocalPath)/.datasets"
      COMMIT_MSG: $(Build.SourceVersionMessage)
      # PYTHON_VERSION: 3.8

    steps:
    - bash: |
        lspci | egrep 'VGA|3D'
        whereis nvidia
        nvidia-smi
        python --version
      displayName: 'Image info & NVIDIA'

    - bash: |
        git fetch --all
        echo $(PUB_BRANCH)
        git ls-remote --heads origin ${PUB_BRANCH} | grep ${PUB_BRANCH} >/dev/null
        if [ "$?" == "1" ] ; then echo "Branch doesn't exist"; exit; fi
      displayName: 'Sanity branch check'

    #- bash: |
    #    sudo apt-get install -y software-properties-common wget ca-certificates
    #    sudo apt-get install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-distutils python${PYTHON_VERSION}-dev
    #    sudo update-alternatives --install /usr/bin/python${PYTHON_VERSION%%.*} python${PYTHON_VERSION%%.*} /usr/bin/python${PYTHON_VERSION} 1
    #    sudo update-alternatives --install /usr/bin/python python /usr/bin/python${PYTHON_VERSION} 1
    #    wget https://bootstrap.pypa.io/get-pip.py --progress=bar:force:noscroll --no-check-certificate
    #    python${PYTHON_VERSION} get-pip.py
    #    rm get-pip.py
    #    python --version
    #    pip --version
    #  displayName: 'Upgrade Python'
    #
    #- task: Cache@2
    #  inputs:
    #    key: 'python | "$(Agent.OS)" | requirements/devel.txt | requirements/default.txt'
    #    restoreKeys: |
    #      python | "$(Agent.OS)"
    #      python
    #    path: $(pip cache dir)
    #  displayName: Cache pip packages

    - bash: |
        pip --version
        pip install --requirement requirements.txt
        pip list
      displayName: 'Install dependencies'

    - bash: |
        set -e
        python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu > 0, f'GPU: {mgpu}'"
        python -m papermill.cli --version
      displayName: 'Sanity check'

    - bash: |
        head=$(git rev-parse origin/$(PUB_BRANCH))
        # todo: still missing past names for rename/modified
        git diff --name-only $head --output=master-diff.txt
        python .actions/helpers.py group-folders master-diff.txt
        echo "Changed folder:"
        cat changed-folders.txt
        echo "Dropped folder:"
        cat dropped-folders.txt
      displayName: 'Process folders'

    - script: |
        COUNT=$(python -c "lines = open('changed-folders.txt').readlines() ; print(len(lines))")
        echo "Chnaged folders: $COUNT"
        echo "##vso[task.setvariable variable=folders;isOutput=true]$COUNT"
      name: changed

    - script: |
        COUNT=$(python -c "lines = open('dropped-folders.txt').readlines() ; print(len(lines))")
        echo "Dropped folders: $COUNT"
        echo "##vso[task.setvariable variable=folders;isOutput=true]$COUNT"
      name: dropped

    - script: |
        echo $(PATH_DATASETS)
        mkdir $(PATH_DATASETS)
        cd $(PATH_DATASETS)
        wget www.di.ens.fr/~lelarge/MNIST.tar.gz --progress=bar:force:noscroll
        tar -zxvf MNIST.tar.gz
        ls -l
      displayName: 'Pull datasets'

    - bash: |
        git config --global user.email "pipelines@azure.com"
        git config --global user.name "Azure Pipelines"
        git checkout $(PUB_BRANCH)
        git merge -s resolve origin/main
      displayName: 'Sync to pub'

    - bash: |
        while IFS= read -r line; do
            bash .actions/ipynb-generate.sh $line
        done <<< $(cat changed-folders.txt)
      condition: gt(variables['changed.folders'], 0)
      displayName: 'Generate notebook'

    - bash: |
        # render the actual notebooks
        while IFS= read -r line; do
            bash .actions/ipynb-render.sh $line
        done <<< $(cat changed-folders.txt)
        git status
        git commit -m "publish [GPU]: $(COMMIT_MSG)"
      condition: and(succeeded(), gt(variables['changed.folders'], 0))
      displayName: 'Render notebook'

    - bash: |
        # remove notebooks which have moved
        while IFS= read -r line; do
            git rm .notebooks/$line.ipynb
        done <<< $(cat dropped-folders.txt)
        git status
        git commit -m "prune: $(COMMIT_MSG)"
      condition: gt(variables['dropped.folders'], 0)
      displayName: 'Prune notebook'

    - bash: |
        git status
        git push https://$(PAT_GHOST)@github.com/PyTorchLightning/lightning-tutorials.git $(PUB_BRANCH)
      displayName: 'Finish push'
